
drone_stack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004754  08004754  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800475c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08004768  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004768  00006110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e068  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3c  00000000  00000000  000140a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00015ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000958  00000000  00000000  00016ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002587f  00000000  00000000  00017440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9cc  00000000  00000000  0003ccbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e721f  00000000  00000000  0004b68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001328aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  001328f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00135a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046ec 	.word	0x080046ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046ec 	.word	0x080046ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <write_sensor_reg>:
#include "VL53L0X.h"

static uint8_t stop_variable;

// define a lil macro here hehe
void write_sensor_reg(VL53L0X* sensor, uint8_t reg, uint8_t val){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
 8000500:	4613      	mov	r3, r2
 8000502:	70bb      	strb	r3, [r7, #2]
	VL53L0X_WriteRegister(sensor, reg, &val);
 8000504:	1cba      	adds	r2, r7, #2
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	4619      	mov	r1, r3
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 fba7 	bl	8000c5e <VL53L0X_WriteRegister>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <perform_single_ref_calibration>:
    CALIBRATION_TYPE_VHV,
    CALIBRATION_TYPE_PHASE
} calibration_type_t;

static HAL_StatusTypeDef perform_single_ref_calibration(VL53L0X* sensor, calibration_type_t calib_type)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
    uint8_t sysrange_start = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	73bb      	strb	r3, [r7, #14]
    uint8_t sequence_config = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	737b      	strb	r3, [r7, #13]
    uint8_t data;


    switch (calib_type)
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <perform_single_ref_calibration+0x20>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d005      	beq.n	8000542 <perform_single_ref_calibration+0x2a>
 8000536:	e009      	b.n	800054c <perform_single_ref_calibration+0x34>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8000538:	2301      	movs	r3, #1
 800053a:	737b      	strb	r3, [r7, #13]
        sysrange_start = 0x01 | 0x40;
 800053c:	2341      	movs	r3, #65	@ 0x41
 800053e:	73bb      	strb	r3, [r7, #14]
        break;
 8000540:	e004      	b.n	800054c <perform_single_ref_calibration+0x34>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8000542:	2302      	movs	r3, #2
 8000544:	737b      	strb	r3, [r7, #13]
        sysrange_start = 0x01 | 0x00;
 8000546:	2301      	movs	r3, #1
 8000548:	73bb      	strb	r3, [r7, #14]
        break;
 800054a:	bf00      	nop
    }


    if (VL53L0X_WriteRegister(sensor, REG_SYSTEM_SEQUENCE_CONFIG, &sequence_config) != HAL_OK) {
 800054c:	f107 030d 	add.w	r3, r7, #13
 8000550:	461a      	mov	r2, r3
 8000552:	2101      	movs	r1, #1
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 fb82 	bl	8000c5e <VL53L0X_WriteRegister>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <perform_single_ref_calibration+0x4c>
        return HAL_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	e042      	b.n	80005ea <perform_single_ref_calibration+0xd2>
    }
    if (VL53L0X_WriteRegister(sensor, REG_SYSRANGE_START, &sysrange_start) != HAL_OK) {
 8000564:	f107 030e 	add.w	r3, r7, #14
 8000568:	461a      	mov	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 fb76 	bl	8000c5e <VL53L0X_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <perform_single_ref_calibration+0x64>
		return HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	e036      	b.n	80005ea <perform_single_ref_calibration+0xd2>
	}


    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]

    do {
        status = VL53L0X_ReadRegister(sensor, REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8000584:	f107 030b 	add.w	r3, r7, #11
 8000588:	461a      	mov	r2, r3
 800058a:	2113      	movs	r1, #19
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fb4b 	bl	8000c28 <VL53L0X_ReadRegister>
 8000592:	4603      	mov	r3, r0
 8000594:	73fb      	strb	r3, [r7, #15]
    } while ((status == HAL_OK) && ((interrupt_status & 0x07) == 0));
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <perform_single_ref_calibration+0x8e>
 800059c:	7afb      	ldrb	r3, [r7, #11]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0ee      	beq.n	8000584 <perform_single_ref_calibration+0x6c>
    if (status != HAL_OK) {
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <perform_single_ref_calibration+0x98>
        return HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e01c      	b.n	80005ea <perform_single_ref_calibration+0xd2>
    }

    data = 0x01;
 80005b0:	2301      	movs	r3, #1
 80005b2:	733b      	strb	r3, [r7, #12]

    if (VL53L0X_WriteRegister(sensor, REG_SYSTEM_INTERRUPT_CLEAR, &data) != HAL_OK) {
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	461a      	mov	r2, r3
 80005ba:	210b      	movs	r1, #11
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fb4e 	bl	8000c5e <VL53L0X_WriteRegister>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <perform_single_ref_calibration+0xb4>
        return HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e00e      	b.n	80005ea <perform_single_ref_calibration+0xd2>
    }
    data = 0x00;
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
    if (VL53L0X_WriteRegister(sensor, REG_SYSRANGE_START, &data) != HAL_OK) {
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fb40 	bl	8000c5e <VL53L0X_WriteRegister>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <perform_single_ref_calibration+0xd0>
        return HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <perform_single_ref_calibration+0xd2>
    }
    return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <VL53L0X_Init>:


HAL_StatusTypeDef VL53L0X_Init(VL53L0X* sensor, I2C_HandleTypeDef* i2c_handle){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	sensor->i2c_handle = i2c_handle;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	601a      	str	r2, [r3, #0]
	sensor->distance = 0.0f;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	809a      	strh	r2, [r3, #4]

	// confirm  that the I2C lines do work with the reference registers
	uint8_t data_high, data_low;
	uint16_t data16;

	uint8_t data = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status;

	status = VL53L0X_ReadRegister(sensor, VL53L0X_I2C_RR1_ADDR, &data);
 800060e:	f107 030e 	add.w	r3, r7, #14
 8000612:	461a      	mov	r2, r3
 8000614:	21c0      	movs	r1, #192	@ 0xc0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fb06 	bl	8000c28 <VL53L0X_ReadRegister>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
	if (data != VL53L0X_I2C_RR1_READ){
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2bee      	cmp	r3, #238	@ 0xee
 8000624:	d001      	beq.n	800062a <VL53L0X_Init+0x36>
		return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e268      	b.n	8000afc <VL53L0X_Init+0x508>
	}

	status = VL53L0X_ReadRegister(sensor, VL53L0X_I2C_RR2_ADDR, &data);
 800062a:	f107 030e 	add.w	r3, r7, #14
 800062e:	461a      	mov	r2, r3
 8000630:	21c1      	movs	r1, #193	@ 0xc1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 faf8 	bl	8000c28 <VL53L0X_ReadRegister>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
	if (data != VL53L0X_I2C_RR2_READ){
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	2baa      	cmp	r3, #170	@ 0xaa
 8000640:	d001      	beq.n	8000646 <VL53L0X_Init+0x52>
		return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e25a      	b.n	8000afc <VL53L0X_Init+0x508>
	}

	status = VL53L0X_ReadRegister(sensor, VL53L0X_I2C_RR3_ADDR, &data);
 8000646:	f107 030e 	add.w	r3, r7, #14
 800064a:	461a      	mov	r2, r3
 800064c:	21c2      	movs	r1, #194	@ 0xc2
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 faea 	bl	8000c28 <VL53L0X_ReadRegister>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
	if (data != VL53L0X_I2C_RR3_READ){
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	2b10      	cmp	r3, #16
 800065c:	d001      	beq.n	8000662 <VL53L0X_Init+0x6e>
		return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e24c      	b.n	8000afc <VL53L0X_Init+0x508>




	// DATA INITIALIZATION
	stop_variable = 0;
 8000662:	4bd7      	ldr	r3, [pc, #860]	@ (80009c0 <VL53L0X_Init+0x3cc>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]

	// set 2v8 voltage mode (I2C baseline)
	uint8_t vhv_config_i2c = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	737b      	strb	r3, [r7, #13]
	status = VL53L0X_ReadRegister(sensor, REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_i2c);
 800066c:	f107 030d 	add.w	r3, r7, #13
 8000670:	461a      	mov	r2, r3
 8000672:	2189      	movs	r1, #137	@ 0x89
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fad7 	bl	8000c28 <VL53L0X_ReadRegister>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
	// set last bit = 1
	vhv_config_i2c |= 0x01; // this is because we are writing to register now
 800067e:	7b7b      	ldrb	r3, [r7, #13]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	737b      	strb	r3, [r7, #13]
	status = VL53L0X_WriteRegister(sensor, REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_i2c);
 8000688:	f107 030d 	add.w	r3, r7, #13
 800068c:	461a      	mov	r2, r3
 800068e:	2189      	movs	r1, #137	@ 0x89
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fae4 	bl	8000c5e <VL53L0X_WriteRegister>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]

	// set i2c speed
	uint8_t temp = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	733b      	strb	r3, [r7, #12]
	status = VL53L0X_WriteRegister(sensor, 0x88, &temp);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	461a      	mov	r2, r3
 80006a4:	2188      	movs	r1, #136	@ 0x88
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fad9 	bl	8000c5e <VL53L0X_WriteRegister>
 80006ac:	4603      	mov	r3, r0
 80006ae:	73fb      	strb	r3, [r7, #15]



	temp = 0x01;
 80006b0:	2301      	movs	r3, #1
 80006b2:	733b      	strb	r3, [r7, #12]
	status = VL53L0X_WriteRegister(sensor, 0x80, &temp);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	461a      	mov	r2, r3
 80006ba:	2180      	movs	r1, #128	@ 0x80
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 face 	bl	8000c5e <VL53L0X_WriteRegister>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
	status = VL53L0X_WriteRegister(sensor, 0xFF, &temp);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	461a      	mov	r2, r3
 80006cc:	21ff      	movs	r1, #255	@ 0xff
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 fac5 	bl	8000c5e <VL53L0X_WriteRegister>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
	temp = 0x00;
 80006d8:	2300      	movs	r3, #0
 80006da:	733b      	strb	r3, [r7, #12]
	status = VL53L0X_WriteRegister(sensor, 0x00, &temp);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	461a      	mov	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 faba 	bl	8000c5e <VL53L0X_WriteRegister>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
	status = VL53L0X_ReadRegister(sensor, 0x91, &stop_variable);
 80006ee:	4ab4      	ldr	r2, [pc, #720]	@ (80009c0 <VL53L0X_Init+0x3cc>)
 80006f0:	2191      	movs	r1, #145	@ 0x91
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 fa98 	bl	8000c28 <VL53L0X_ReadRegister>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
	temp = 0x01;
 80006fc:	2301      	movs	r3, #1
 80006fe:	733b      	strb	r3, [r7, #12]
	status = VL53L0X_WriteRegister(sensor, 0x00, &temp);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	461a      	mov	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 faa8 	bl	8000c5e <VL53L0X_WriteRegister>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	temp = 0x00;
 8000712:	2300      	movs	r3, #0
 8000714:	733b      	strb	r3, [r7, #12]
	status = VL53L0X_WriteRegister(sensor, 0xFF, &temp);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	461a      	mov	r2, r3
 800071c:	21ff      	movs	r1, #255	@ 0xff
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 fa9d 	bl	8000c5e <VL53L0X_WriteRegister>
 8000724:	4603      	mov	r3, r0
 8000726:	73fb      	strb	r3, [r7, #15]
	status = VL53L0X_WriteRegister(sensor, 0x80, &temp);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	461a      	mov	r2, r3
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fa94 	bl	8000c5e <VL53L0X_WriteRegister>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]

	// STATIC INITIALIZATION: default tuning settings

	write_sensor_reg(sensor, 0xFF, 0x01);
 800073a:	2201      	movs	r2, #1
 800073c:	21ff      	movs	r1, #255	@ 0xff
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff fed8 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x00, 0x00);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fed3 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 800074e:	2200      	movs	r2, #0
 8000750:	21ff      	movs	r1, #255	@ 0xff
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff fece 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x09, 0x00);
 8000758:	2200      	movs	r2, #0
 800075a:	2109      	movs	r1, #9
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fec9 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x10, 0x00);
 8000762:	2200      	movs	r2, #0
 8000764:	2110      	movs	r1, #16
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff fec4 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x11, 0x00);
 800076c:	2200      	movs	r2, #0
 800076e:	2111      	movs	r1, #17
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff febf 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x24, 0x01);
 8000776:	2201      	movs	r2, #1
 8000778:	2124      	movs	r1, #36	@ 0x24
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff feba 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x25, 0xFF);
 8000780:	22ff      	movs	r2, #255	@ 0xff
 8000782:	2125      	movs	r1, #37	@ 0x25
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff feb5 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x75, 0x00);
 800078a:	2200      	movs	r2, #0
 800078c:	2175      	movs	r1, #117	@ 0x75
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff feb0 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 8000794:	2201      	movs	r2, #1
 8000796:	21ff      	movs	r1, #255	@ 0xff
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff feab 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x4E, 0x2C);
 800079e:	222c      	movs	r2, #44	@ 0x2c
 80007a0:	214e      	movs	r1, #78	@ 0x4e
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fea6 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x48, 0x00);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2148      	movs	r1, #72	@ 0x48
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fea1 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x30, 0x20);
 80007b2:	2220      	movs	r2, #32
 80007b4:	2130      	movs	r1, #48	@ 0x30
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fe9c 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 80007bc:	2200      	movs	r2, #0
 80007be:	21ff      	movs	r1, #255	@ 0xff
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe97 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x30, 0x09);
 80007c6:	2209      	movs	r2, #9
 80007c8:	2130      	movs	r1, #48	@ 0x30
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fe92 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x54, 0x00);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2154      	movs	r1, #84	@ 0x54
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe8d 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x31, 0x04);
 80007da:	2204      	movs	r2, #4
 80007dc:	2131      	movs	r1, #49	@ 0x31
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fe88 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x32, 0x03);
 80007e4:	2203      	movs	r2, #3
 80007e6:	2132      	movs	r1, #50	@ 0x32
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe83 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x40, 0x83);
 80007ee:	2283      	movs	r2, #131	@ 0x83
 80007f0:	2140      	movs	r1, #64	@ 0x40
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fe7e 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x46, 0x25);
 80007f8:	2225      	movs	r2, #37	@ 0x25
 80007fa:	2146      	movs	r1, #70	@ 0x46
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe79 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x60, 0x00);
 8000802:	2200      	movs	r2, #0
 8000804:	2160      	movs	r1, #96	@ 0x60
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe74 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x27, 0x00);
 800080c:	2200      	movs	r2, #0
 800080e:	2127      	movs	r1, #39	@ 0x27
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fe6f 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x50, 0x06);
 8000816:	2206      	movs	r2, #6
 8000818:	2150      	movs	r1, #80	@ 0x50
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fe6a 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x51, 0x00);
 8000820:	2200      	movs	r2, #0
 8000822:	2151      	movs	r1, #81	@ 0x51
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fe65 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x52, 0x96);
 800082a:	2296      	movs	r2, #150	@ 0x96
 800082c:	2152      	movs	r1, #82	@ 0x52
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe60 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x56, 0x08);
 8000834:	2208      	movs	r2, #8
 8000836:	2156      	movs	r1, #86	@ 0x56
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fe5b 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x57, 0x30);
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	2157      	movs	r1, #87	@ 0x57
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe56 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x61, 0x00);
 8000848:	2200      	movs	r2, #0
 800084a:	2161      	movs	r1, #97	@ 0x61
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fe51 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x62, 0x00);
 8000852:	2200      	movs	r2, #0
 8000854:	2162      	movs	r1, #98	@ 0x62
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fe4c 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x64, 0x00);
 800085c:	2200      	movs	r2, #0
 800085e:	2164      	movs	r1, #100	@ 0x64
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fe47 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x65, 0x00);
 8000866:	2200      	movs	r2, #0
 8000868:	2165      	movs	r1, #101	@ 0x65
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fe42 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x66, 0xA0);
 8000870:	22a0      	movs	r2, #160	@ 0xa0
 8000872:	2166      	movs	r1, #102	@ 0x66
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe3d 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 800087a:	2201      	movs	r2, #1
 800087c:	21ff      	movs	r1, #255	@ 0xff
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe38 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x22, 0x32);
 8000884:	2232      	movs	r2, #50	@ 0x32
 8000886:	2122      	movs	r1, #34	@ 0x22
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fe33 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x47, 0x14);
 800088e:	2214      	movs	r2, #20
 8000890:	2147      	movs	r1, #71	@ 0x47
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe2e 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x49, 0xFF);
 8000898:	22ff      	movs	r2, #255	@ 0xff
 800089a:	2149      	movs	r1, #73	@ 0x49
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe29 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x4A, 0x00);
 80008a2:	2200      	movs	r2, #0
 80008a4:	214a      	movs	r1, #74	@ 0x4a
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fe24 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 80008ac:	2200      	movs	r2, #0
 80008ae:	21ff      	movs	r1, #255	@ 0xff
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe1f 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x7A, 0x0A);
 80008b6:	220a      	movs	r2, #10
 80008b8:	217a      	movs	r1, #122	@ 0x7a
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe1a 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x7B, 0x00);
 80008c0:	2200      	movs	r2, #0
 80008c2:	217b      	movs	r1, #123	@ 0x7b
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fe15 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x78, 0x21);
 80008ca:	2221      	movs	r2, #33	@ 0x21
 80008cc:	2178      	movs	r1, #120	@ 0x78
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fe10 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 80008d4:	2201      	movs	r2, #1
 80008d6:	21ff      	movs	r1, #255	@ 0xff
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fe0b 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x23, 0x34);
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2123      	movs	r1, #35	@ 0x23
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fe06 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x42, 0x00);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2142      	movs	r1, #66	@ 0x42
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fe01 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x44, 0xFF);
 80008f2:	22ff      	movs	r2, #255	@ 0xff
 80008f4:	2144      	movs	r1, #68	@ 0x44
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fdfc 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x45, 0x26);
 80008fc:	2226      	movs	r2, #38	@ 0x26
 80008fe:	2145      	movs	r1, #69	@ 0x45
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fdf7 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x46, 0x05);
 8000906:	2205      	movs	r2, #5
 8000908:	2146      	movs	r1, #70	@ 0x46
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fdf2 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x40, 0x40);
 8000910:	2240      	movs	r2, #64	@ 0x40
 8000912:	2140      	movs	r1, #64	@ 0x40
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fded 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x0E, 0x06);
 800091a:	2206      	movs	r2, #6
 800091c:	210e      	movs	r1, #14
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fde8 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x20, 0x1A);
 8000924:	221a      	movs	r2, #26
 8000926:	2120      	movs	r1, #32
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fde3 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x43, 0x40);
 800092e:	2240      	movs	r2, #64	@ 0x40
 8000930:	2143      	movs	r1, #67	@ 0x43
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fdde 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 8000938:	2200      	movs	r2, #0
 800093a:	21ff      	movs	r1, #255	@ 0xff
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fdd9 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x34, 0x03);
 8000942:	2203      	movs	r2, #3
 8000944:	2134      	movs	r1, #52	@ 0x34
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fdd4 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x35, 0x44);
 800094c:	2244      	movs	r2, #68	@ 0x44
 800094e:	2135      	movs	r1, #53	@ 0x35
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fdcf 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 8000956:	2201      	movs	r2, #1
 8000958:	21ff      	movs	r1, #255	@ 0xff
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fdca 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x31, 0x04);
 8000960:	2204      	movs	r2, #4
 8000962:	2131      	movs	r1, #49	@ 0x31
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fdc5 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x4B, 0x09);
 800096a:	2209      	movs	r2, #9
 800096c:	214b      	movs	r1, #75	@ 0x4b
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fdc0 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x4C, 0x05);
 8000974:	2205      	movs	r2, #5
 8000976:	214c      	movs	r1, #76	@ 0x4c
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fdbb 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x4D, 0x04);
 800097e:	2204      	movs	r2, #4
 8000980:	214d      	movs	r1, #77	@ 0x4d
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fdb6 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 8000988:	2200      	movs	r2, #0
 800098a:	21ff      	movs	r1, #255	@ 0xff
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fdb1 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x44, 0x00);
 8000992:	2200      	movs	r2, #0
 8000994:	2144      	movs	r1, #68	@ 0x44
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fdac 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x45, 0x20);
 800099c:	2220      	movs	r2, #32
 800099e:	2145      	movs	r1, #69	@ 0x45
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fda7 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x47, 0x08);
 80009a6:	2208      	movs	r2, #8
 80009a8:	2147      	movs	r1, #71	@ 0x47
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fda2 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x48, 0x28);
 80009b0:	2228      	movs	r2, #40	@ 0x28
 80009b2:	2148      	movs	r1, #72	@ 0x48
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fd9d 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x67, 0x00);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2167      	movs	r1, #103	@ 0x67
 80009be:	e001      	b.n	80009c4 <VL53L0X_Init+0x3d0>
 80009c0:	20000028 	.word	0x20000028
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fd95 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x70, 0x04);
 80009ca:	2204      	movs	r2, #4
 80009cc:	2170      	movs	r1, #112	@ 0x70
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fd90 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x71, 0x01);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2171      	movs	r1, #113	@ 0x71
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff fd8b 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x72, 0xFE);
 80009de:	22fe      	movs	r2, #254	@ 0xfe
 80009e0:	2172      	movs	r1, #114	@ 0x72
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fd86 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x76, 0x00);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2176      	movs	r1, #118	@ 0x76
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fd81 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x77, 0x00);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2177      	movs	r1, #119	@ 0x77
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fd7c 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 80009fc:	2201      	movs	r2, #1
 80009fe:	21ff      	movs	r1, #255	@ 0xff
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fd77 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x0D, 0x01);
 8000a06:	2201      	movs	r2, #1
 8000a08:	210d      	movs	r1, #13
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fd72 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 8000a10:	2200      	movs	r2, #0
 8000a12:	21ff      	movs	r1, #255	@ 0xff
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fd6d 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x80, 0x01);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd68 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x01, 0xF8);
 8000a24:	22f8      	movs	r2, #248	@ 0xf8
 8000a26:	2101      	movs	r1, #1
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fd63 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x01);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	21ff      	movs	r1, #255	@ 0xff
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fd5e 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x8E, 0x01);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	218e      	movs	r1, #142	@ 0x8e
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fd59 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x00, 0x01);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2100      	movs	r1, #0
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fd54 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0xFF, 0x00);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	21ff      	movs	r1, #255	@ 0xff
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fd4f 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor, 0x80, 0x00);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fd4a 	bl	80004f4 <write_sensor_reg>

	// now configure interrupts

	write_sensor_reg(sensor, REG_SYSTEM_INTERRUPT_CONFIG_GPIO,0x04);
 8000a60:	2204      	movs	r2, #4
 8000a62:	210a      	movs	r1, #10
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff fd45 	bl	80004f4 <write_sensor_reg>

	uint8_t gpio_hv_mux_active_high = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	72fb      	strb	r3, [r7, #11]
	status = VL53L0X_ReadRegister(sensor, REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high);
 8000a6e:	f107 030b 	add.w	r3, r7, #11
 8000a72:	461a      	mov	r2, r3
 8000a74:	2184      	movs	r1, #132	@ 0x84
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f8d6 	bl	8000c28 <VL53L0X_ReadRegister>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	gpio_hv_mux_active_high &= ~0x10;
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	f023 0310 	bic.w	r3, r3, #16
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	72fb      	strb	r3, [r7, #11]
	status = VL53L0X_WriteRegister(sensor, REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high);
 8000a8a:	f107 030b 	add.w	r3, r7, #11
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2184      	movs	r1, #132	@ 0x84
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f8e3 	bl	8000c5e <VL53L0X_WriteRegister>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]
	write_sensor_reg(sensor, REG_SYSTEM_INTERRUPT_CLEAR,0x01);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	210b      	movs	r1, #11
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fd27 	bl	80004f4 <write_sensor_reg>

	// last step of static init:
	temp = RANGE_SEQUENCE_STEP_DSS + RANGE_SEQUENCE_STEP_FINAL_RANGE + RANGE_SEQUENCE_STEP_PRE_RANGE;
 8000aa6:	23e8      	movs	r3, #232	@ 0xe8
 8000aa8:	733b      	strb	r3, [r7, #12]
	VL53L0X_WriteRegister(sensor, REG_SYSTEM_SEQUENCE_CONFIG, &temp);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f8d3 	bl	8000c5e <VL53L0X_WriteRegister>


	// do calibration

	if (perform_single_ref_calibration(sensor, CALIBRATION_TYPE_VHV) != HAL_OK){
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fd2c 	bl	8000518 <perform_single_ref_calibration>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <VL53L0X_Init+0x4d6>
		return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e018      	b.n	8000afc <VL53L0X_Init+0x508>
	}
	if (perform_single_ref_calibration(sensor, CALIBRATION_TYPE_PHASE) != HAL_OK){
 8000aca:	2101      	movs	r1, #1
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fd23 	bl	8000518 <perform_single_ref_calibration>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <VL53L0X_Init+0x4e8>
		return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e00f      	b.n	8000afc <VL53L0X_Init+0x508>
	}

	temp = RANGE_SEQUENCE_STEP_DSS + RANGE_SEQUENCE_STEP_FINAL_RANGE + RANGE_SEQUENCE_STEP_PRE_RANGE;
 8000adc:	23e8      	movs	r3, #232	@ 0xe8
 8000ade:	733b      	strb	r3, [r7, #12]
	VL53L0X_WriteRegister(sensor, REG_SYSTEM_SEQUENCE_CONFIG, &temp);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f8b8 	bl	8000c5e <VL53L0X_WriteRegister>


	// sensor successfully initialized!!!

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2120      	movs	r1, #32
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 ff1d 	bl	8001934 <HAL_GPIO_WritePin>

	return status;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]


}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <VL53L0X_MeasureDistance>:


// DATA ACQUISITION

HAL_StatusTypeDef VL53L0X_MeasureDistance(VL53L0X* sensor){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	 */
	HAL_StatusTypeDef status;
	uint8_t data_high, data_low;
	uint16_t data16;

	uint8_t data = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	747b      	strb	r3, [r7, #17]

	// STEP 1
	write_sensor_reg(sensor,0x80,0x01);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2180      	movs	r1, #128	@ 0x80
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fced 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor,0xFF,0x01);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	21ff      	movs	r1, #255	@ 0xff
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fce8 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor,0x00,0x00);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fce3 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor,0x91,stop_variable);
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <VL53L0X_MeasureDistance+0x120>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	2191      	movs	r1, #145	@ 0x91
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fcdc 	bl	80004f4 <write_sensor_reg>
	// STEP 2
	write_sensor_reg(sensor,0x00,0x01);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2100      	movs	r1, #0
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fcd7 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor,0xFF,0x00);
 8000b46:	2200      	movs	r2, #0
 8000b48:	21ff      	movs	r1, #255	@ 0xff
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fcd2 	bl	80004f4 <write_sensor_reg>
	write_sensor_reg(sensor,0x80,0x00);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2180      	movs	r1, #128	@ 0x80
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fccd 	bl	80004f4 <write_sensor_reg>

	write_sensor_reg(sensor,REG_SYSRANGE_START,0x01);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fcc8 	bl	80004f4 <write_sensor_reg>

	uint8_t sysrange_start = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	743b      	strb	r3, [r7, #16]

	do {
		status = VL53L0X_ReadRegister(sensor, REG_SYSRANGE_START, &sysrange_start);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f859 	bl	8000c28 <VL53L0X_ReadRegister>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75fb      	strb	r3, [r7, #23]
	} while((sysrange_start & 0x01) && (status == HAL_OK));
 8000b7a:	7c3b      	ldrb	r3, [r7, #16]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <VL53L0X_MeasureDistance+0x86>
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0ee      	beq.n	8000b68 <VL53L0X_MeasureDistance+0x64>
	if (status != HAL_OK){
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <VL53L0X_MeasureDistance+0x90>
		return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e042      	b.n	8000c1a <VL53L0X_MeasureDistance+0x116>
	}


	uint8_t interrupt_status = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
	do {
		status = VL53L0X_ReadRegister(sensor, REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8000b98:	f107 030f 	add.w	r3, r7, #15
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2113      	movs	r1, #19
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f841 	bl	8000c28 <VL53L0X_ReadRegister>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
	} while ((status == HAL_OK) && ((interrupt_status & 0x07) == 0x00));
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <VL53L0X_MeasureDistance+0xb6>
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0ee      	beq.n	8000b98 <VL53L0X_MeasureDistance+0x94>
	if (status != HAL_OK){
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <VL53L0X_MeasureDistance+0xc0>
		return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e02a      	b.n	8000c1a <VL53L0X_MeasureDistance+0x116>
	}


	VL53L0X_ReadRegister(sensor, REG_RESULT_RANGE_STATUS+10, &data_high);
 8000bc4:	f107 0313 	add.w	r3, r7, #19
 8000bc8:	461a      	mov	r2, r3
 8000bca:	211e      	movs	r1, #30
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f82b 	bl	8000c28 <VL53L0X_ReadRegister>
	VL53L0X_ReadRegister(sensor, REG_RESULT_RANGE_STATUS+11, &data_low);
 8000bd2:	f107 0312 	add.w	r3, r7, #18
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	211f      	movs	r1, #31
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f824 	bl	8000c28 <VL53L0X_ReadRegister>
	data16 = (data_high << 8) | data_low;
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	7cbb      	ldrb	r3, [r7, #18]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	82bb      	strh	r3, [r7, #20]


	//finally, clear interrupt mask
	data = 0x01;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	747b      	strb	r3, [r7, #17]
	status = VL53L0X_WriteRegister(sensor, REG_SYSTEM_INTERRUPT_CLEAR, &data);
 8000bf6:	f107 0311 	add.w	r3, r7, #17
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	210b      	movs	r1, #11
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f000 f82d 	bl	8000c5e <VL53L0X_WriteRegister>
 8000c04:	4603      	mov	r3, r0
 8000c06:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK){
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <VL53L0X_MeasureDistance+0x10e>
		return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e003      	b.n	8000c1a <VL53L0X_MeasureDistance+0x116>
	}

	sensor->distance = data16;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8aba      	ldrh	r2, [r7, #20]
 8000c16:	809a      	strh	r2, [r3, #4]


	return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000028 	.word	0x20000028

08000c28 <VL53L0X_ReadRegister>:



// READING AND WRITING REGISTERS

HAL_StatusTypeDef VL53L0X_ReadRegister(VL53L0X* sensor, const uint8_t reg, uint8_t* pData) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	460b      	mov	r3, r1
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	72fb      	strb	r3, [r7, #11]
	//data is a pointer to the where data will be read to

	return HAL_I2C_Mem_Read(sensor->i2c_handle, VL53L0X_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	7afb      	ldrb	r3, [r7, #11]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	2301      	movs	r3, #1
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	2152      	movs	r1, #82	@ 0x52
 8000c50:	f001 f86a 	bl	8001d28 <HAL_I2C_Mem_Read>
 8000c54:	4603      	mov	r3, r0

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <VL53L0X_WriteRegister>:

	return HAL_I2C_Mem_Read(sensor->i2c_handle, VL53L0X_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pData, length, HAL_MAX_DELAY);

}

HAL_StatusTypeDef VL53L0X_WriteRegister(VL53L0X* sensor, const uint8_t reg, uint8_t* pData){
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b088      	sub	sp, #32
 8000c62:	af04      	add	r7, sp, #16
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	460b      	mov	r3, r1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(sensor->i2c_handle, VL53L0X_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	2152      	movs	r1, #82	@ 0x52
 8000c86:	f000 ff3b 	bl	8001b00 <HAL_I2C_Mem_Write>
 8000c8a:	4603      	mov	r3, r0

}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_PIN == B1_Pin){
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ca4:	d104      	bne.n	8000cb0 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cac:	f000 fe5a 	bl	8001964 <HAL_GPIO_TogglePin>
	}

	if (GPIO_PIN == TOF_INTERRUPT_Pin && !LED_FLAG){
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cb6:	d107      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0x34>
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0x34>

		LED_FLAG = true;
 8000cc2:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]

	}
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000080 	.word	0x20000080

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 facf 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f831 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f8f1 	bl	8000ec8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce6:	f000 f8bf 	bl	8000e68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cea:	f000 f87d 	bl	8000de8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  VL53L0X TOF_sensor;

  VL53L0X_Init(&TOF_sensor, &hi2c1);
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4912      	ldr	r1, [pc, #72]	@ (8000d3c <main+0x68>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc7e 	bl	80005f4 <VL53L0X_Init>
  uint16_t distance = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	817b      	strh	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LED_FLAG){
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <main+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d013      	beq.n	8000d2e <main+0x5a>
		  for (int i =0; i< 15; ++i){
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e00a      	b.n	8000d22 <main+0x4e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d12:	f000 fe27 	bl	8001964 <HAL_GPIO_TogglePin>
			  HAL_Delay(75);
 8000d16:	204b      	movs	r0, #75	@ 0x4b
 8000d18:	f000 fb2c 	bl	8001374 <HAL_Delay>
		  for (int i =0; i< 15; ++i){
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b0e      	cmp	r3, #14
 8000d26:	ddf1      	ble.n	8000d0c <main+0x38>
		  }
		  LED_FLAG = false;
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <main+0x6c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]

	  }


	  VL53L0X_MeasureDistance(&TOF_sensor);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fee7 	bl	8000b04 <VL53L0X_MeasureDistance>
	  distance = TOF_sensor.distance;
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	817b      	strh	r3, [r7, #10]
	  if (LED_FLAG){
 8000d3a:	e7df      	b.n	8000cfc <main+0x28>
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	20000080 	.word	0x20000080

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b096      	sub	sp, #88	@ 0x58
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2244      	movs	r2, #68	@ 0x44
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fc9d 	bl	8004692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d6a:	f001 fc5f 	bl	800262c <HAL_PWREx_ControlVoltageScaling>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d74:	f000 f926 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d82:	2310      	movs	r3, #16
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d92:	230a      	movs	r3, #10
 8000d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d96:	2307      	movs	r3, #7
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fc96 	bl	80026d8 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000db2:	f000 f907 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f85e 	bl	8002e90 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dda:	f000 f8f3 	bl	8000fc4 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3758      	adds	r7, #88	@ 0x58
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f000 fdd0 	bl	80019c8 <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 f8c9 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f001 fb53 	bl	80024e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f8c0 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f001 fb95 	bl	8002576 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f8b7 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000002c 	.word	0x2000002c
 8000e60:	40005400 	.word	0x40005400
 8000e64:	10d19ce4 	.word	0x10d19ce4

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e6e:	4a15      	ldr	r2, [pc, #84]	@ (8000ec4 <MX_USART2_UART_Init+0x5c>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000eac:	f002 fed0 	bl	8003c50 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb6:	f000 f885 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000084 	.word	0x20000084
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a36      	ldr	r2, [pc, #216]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a30      	ldr	r2, [pc, #192]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a2a      	ldr	r2, [pc, #168]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4a24      	ldr	r2, [pc, #144]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f46:	f000 fcf5 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f62:	f000 fb3d 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f66:	2320      	movs	r3, #32
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f000 fb2e 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = TOF_INTERRUPT_Pin;
 8000f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f000 fb1f 	bl	80015e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2028      	movs	r0, #40	@ 0x28
 8000fa8:	f000 fae3 	bl	8001572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fac:	2028      	movs	r0, #40	@ 0x28
 8000fae:	f000 fafc 	bl	80015aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <Error_Handler+0x8>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_MspInit+0x44>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_MspInit+0x44>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ac      	sub	sp, #176	@ 0xb0
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2288      	movs	r2, #136	@ 0x88
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fb2a 	bl	8004692 <memset>
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <HAL_I2C_MspInit+0xb0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d13a      	bne.n	80010be <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104c:	2300      	movs	r3, #0
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f93f 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001060:	f7ff ffb0 	bl	8000fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107c:	23c0      	movs	r3, #192	@ 0xc0
 800107e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001094:	2304      	movs	r3, #4
 8001096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010a2:	f000 fa9d 	bl	80015e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	37b0      	adds	r7, #176	@ 0xb0
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	@ 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	@ 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 facc 	bl	8004692 <memset>
  if(huart->Instance==USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_UART_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f002 f8e1 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff ff52 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112a:	6593      	str	r3, [r2, #88]	@ 0x58
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_UART_MspInit+0xb4>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001150:	230c      	movs	r3, #12
 8001152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001168:	2307      	movs	r3, #7
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f000 fa32 	bl	80015e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	@ 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <NMI_Handler+0x4>

08001194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <MemManage_Handler+0x4>

080011a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e2:	f000 f8a7 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INTERRUPT_Pin);
 80011ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011f2:	f000 fbd1 	bl	8001998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011fa:	f000 fbcd 	bl	8001998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001260 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800122c:	f7ff ffea 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f003 fa25 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125a:	f7ff fd3b 	bl	8000cd4 <main>

0800125e <LoopForever>:

LoopForever:
    b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800126c:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 8001270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001274:	20000110 	.word	0x20000110

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_Init+0x3c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <HAL_Init+0x3c>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001292:	2003      	movs	r0, #3
 8001294:	f000 f962 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001298:	2000      	movs	r0, #0
 800129a:	f000 f80f 	bl	80012bc <HAL_InitTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	e001      	b.n	80012ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012aa:	f7ff fe91 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_InitTick+0x6c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d023      	beq.n	8001318 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_InitTick+0x70>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_InitTick+0x6c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f96d 	bl	80015c6 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d809      	bhi.n	800130c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001300:	f000 f937 	bl	8001572 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_InitTick+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e007      	b.n	800131c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e004      	b.n	800131c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e001      	b.n	800131c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	2000010c 	.word	0x2000010c

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000010c 	.word	0x2000010c

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	@ (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff3e 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff31 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e17f      	b.n	80018f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8171 	beq.w	80018ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d005      	beq.n	8001620 <HAL_GPIO_Init+0x40>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d130      	bne.n	8001682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001656:	2201      	movs	r2, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 0201 	and.w	r2, r3, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b03      	cmp	r3, #3
 800168c:	d118      	bne.n	80016c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d017      	beq.n	80016fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d123      	bne.n	8001750 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	6939      	ldr	r1, [r7, #16]
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80ac 	beq.w	80018ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_GPIO_Init+0x330>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_GPIO_Init+0x330>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	@ 0x60
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_GPIO_Init+0x330>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001914 <HAL_GPIO_Init+0x334>)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x242>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001918 <HAL_GPIO_Init+0x338>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x23e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4e      	ldr	r2, [pc, #312]	@ (800191c <HAL_GPIO_Init+0x33c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x23a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001920 <HAL_GPIO_Init+0x340>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x236>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_GPIO_Init+0x344>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x232>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001928 <HAL_GPIO_Init+0x348>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x22e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4a      	ldr	r2, [pc, #296]	@ (800192c <HAL_GPIO_Init+0x34c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x22a>
 8001806:	2306      	movs	r3, #6
 8001808:	e00c      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800180a:	2307      	movs	r3, #7
 800180c:	e00a      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800180e:	2305      	movs	r3, #5
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001812:	2304      	movs	r3, #4
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001822:	2300      	movs	r3, #0
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001834:	4937      	ldr	r1, [pc, #220]	@ (8001914 <HAL_GPIO_Init+0x334>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <HAL_GPIO_Init+0x350>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001866:	4a32      	ldr	r2, [pc, #200]	@ (8001930 <HAL_GPIO_Init+0x350>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <HAL_GPIO_Init+0x350>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001890:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <HAL_GPIO_Init+0x350>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_GPIO_Init+0x350>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <HAL_GPIO_Init+0x350>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_GPIO_Init+0x350>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <HAL_GPIO_Init+0x350>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f ae78 	bne.w	80015f0 <HAL_GPIO_Init+0x10>
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48001000 	.word	0x48001000
 8001928:	48001400 	.word	0x48001400
 800192c:	48001800 	.word	0x48001800
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001950:	e002      	b.n	8001958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43d9      	mvns	r1, r3
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	400b      	ands	r3, r1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f96c 	bl	8000c94 <HAL_GPIO_EXTI_Callback>
  }
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08d      	b.n	8001af6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fb12 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	e006      	b.n	8001a50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d108      	bne.n	8001a6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	e007      	b.n	8001a7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69d9      	ldr	r1, [r3, #28]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	817b      	strh	r3, [r7, #10]
 8001b12:	460b      	mov	r3, r1
 8001b14:	813b      	strh	r3, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	f040 80f9 	bne.w	8001d1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_I2C_Mem_Write+0x34>
 8001b2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0ed      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Mem_Write+0x4e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0e6      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b56:	f7ff fc01 	bl	800135c <HAL_GetTick>
 8001b5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2319      	movs	r3, #25
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fac3 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0d1      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2221      	movs	r2, #33	@ 0x21
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2240      	movs	r2, #64	@ 0x40
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba0:	88f8      	ldrh	r0, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	8979      	ldrh	r1, [r7, #10]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f9d3 	bl	8001f5c <I2C_RequestMemoryWrite>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0a9      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	2bff      	cmp	r3, #255	@ 0xff
 8001bd0:	d90e      	bls.n	8001bf0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	22ff      	movs	r2, #255	@ 0xff
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	8979      	ldrh	r1, [r7, #10]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fc47 	bl	800247c <I2C_TransferConfig>
 8001bee:	e00f      	b.n	8001c10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	8979      	ldrh	r1, [r7, #10]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fc36 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fac6 	bl	80021a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e07b      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d034      	beq.n	8001cc8 <HAL_I2C_Mem_Write+0x1c8>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d130      	bne.n	8001cc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	@ 0x80
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fa3f 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e04d      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2bff      	cmp	r3, #255	@ 0xff
 8001c88:	d90e      	bls.n	8001ca8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	22ff      	movs	r2, #255	@ 0xff
 8001c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	8979      	ldrh	r1, [r7, #10]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fbeb 	bl	800247c <I2C_TransferConfig>
 8001ca6:	e00f      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	8979      	ldrh	r1, [r7, #10]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fbda 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d19e      	bne.n	8001c10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 faac 	bl	8002234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e01a      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_I2C_Mem_Write+0x224>)
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	fe00e800 	.word	0xfe00e800

08001d28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	f040 80fd 	bne.w	8001f4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x34>
 8001d56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0f1      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Mem_Read+0x4e>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0ea      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d7e:	f7ff faed 	bl	800135c <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2319      	movs	r3, #25
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f9af 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d5      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2222      	movs	r2, #34	@ 0x22
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dc8:	88f8      	ldrh	r0, [r7, #6]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	8979      	ldrh	r1, [r7, #10]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f913 	bl	8002004 <I2C_RequestMemoryRead>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0ad      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2bff      	cmp	r3, #255	@ 0xff
 8001df8:	d90e      	bls.n	8001e18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	8979      	ldrh	r1, [r7, #10]
 8001e08:	4b52      	ldr	r3, [pc, #328]	@ (8001f54 <HAL_I2C_Mem_Read+0x22c>)
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fb33 	bl	800247c <I2C_TransferConfig>
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	8979      	ldrh	r1, [r7, #10]
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f54 <HAL_I2C_Mem_Read+0x22c>)
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fb22 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2104      	movs	r1, #4
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f956 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07c      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d034      	beq.n	8001ef8 <HAL_I2C_Mem_Read+0x1d0>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d130      	bne.n	8001ef8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f927 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e04d      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d90e      	bls.n	8001ed8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	8979      	ldrh	r1, [r7, #10]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fad3 	bl	800247c <I2C_TransferConfig>
 8001ed6:	e00f      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	8979      	ldrh	r1, [r7, #10]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fac2 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d19a      	bne.n	8001e38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f994 	bl	8002234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01a      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_I2C_Mem_Read+0x230>)
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	80002400 	.word	0x80002400
 8001f58:	fe00e800 	.word	0xfe00e800

08001f5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	817b      	strh	r3, [r7, #10]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	813b      	strh	r3, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	8979      	ldrh	r1, [r7, #10]
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <I2C_RequestMemoryWrite+0xa4>)
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fa79 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f909 	bl	80021a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e02c      	b.n	8001ff8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa4:	893b      	ldrh	r3, [r7, #8]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fae:	e015      	b.n	8001fdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	69b9      	ldr	r1, [r7, #24]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8ef 	bl	80021a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e012      	b.n	8001ff8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd2:	893b      	ldrh	r3, [r7, #8]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f884 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	80002000 	.word	0x80002000

08002004 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <I2C_RequestMemoryRead+0xa4>)
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fa26 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f8b6 	bl	80021a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e02c      	b.n	800209e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800204a:	893b      	ldrh	r3, [r7, #8]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
 8002054:	e015      	b.n	8002082 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002056:	893b      	ldrh	r3, [r7, #8]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f89c 	bl	80021a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e012      	b.n	800209e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002078:	893b      	ldrh	r3, [r7, #8]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2200      	movs	r2, #0
 800208a:	2140      	movs	r1, #64	@ 0x40
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f831 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	80002000 	.word	0x80002000

080020ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d103      	bne.n	80020ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d007      	beq.n	80020e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	619a      	str	r2, [r3, #24]
  }
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002104:	e03b      	b.n	800217e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f8d6 	bl	80022bc <I2C_IsErrorOccurred>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002120:	d02d      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff f91b 	bl	800135c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d122      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4013      	ands	r3, r2
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	429a      	cmp	r2, r3
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	429a      	cmp	r2, r3
 8002154:	d113      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4013      	ands	r3, r2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d0b4      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021b2:	e033      	b.n	800221c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f87f 	bl	80022bc <I2C_IsErrorOccurred>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e031      	b.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ce:	d025      	beq.n	800221c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7ff f8c4 	bl	800135c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11a      	bne.n	800221c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d013      	beq.n	800221c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e007      	b.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d1c4      	bne.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002240:	e02f      	b.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f838 	bl	80022bc <I2C_IsErrorOccurred>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e02d      	b.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002256:	f7ff f881 	bl	800135c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11a      	bne.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d013      	beq.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e007      	b.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d1c8      	bne.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d068      	beq.n	80023ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022f0:	e049      	b.n	8002386 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f8:	d045      	beq.n	8002386 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff f82f 	bl	800135c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_IsErrorOccurred+0x54>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d13a      	bne.n	8002386 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002322:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800232e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002332:	d121      	bne.n	8002378 <I2C_IsErrorOccurred+0xbc>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800233a:	d01d      	beq.n	8002378 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b20      	cmp	r3, #32
 8002340:	d01a      	beq.n	8002378 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002350:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002352:	f7ff f803 	bl	800135c <HAL_GetTick>
 8002356:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002358:	e00e      	b.n	8002378 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800235a:	f7fe ffff 	bl	800135c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b19      	cmp	r3, #25
 8002366:	d907      	bls.n	8002378 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002376:	e006      	b.n	8002386 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b20      	cmp	r3, #32
 8002384:	d1e9      	bne.n	800235a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b20      	cmp	r3, #32
 8002392:	d003      	beq.n	800239c <I2C_IsErrorOccurred+0xe0>
 8002394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0aa      	beq.n	80022f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800239c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2220      	movs	r2, #32
 80023aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002420:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fe3b 	bl	80020ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <I2C_IsErrorOccurred+0x1bc>)
 8002442:	400b      	ands	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800246a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800246e:	4618      	mov	r0, r3
 8002470:	3728      	adds	r7, #40	@ 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	fe00e800 	.word	0xfe00e800

0800247c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	4613      	mov	r3, r2
 800248c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002494:	7a7b      	ldrb	r3, [r7, #9]
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <I2C_TransferConfig+0x60>)
 80024bc:	430b      	orrs	r3, r1
 80024be:	43db      	mvns	r3, r3
 80024c0:	ea02 0103 	and.w	r1, r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	03ff63ff 	.word	0x03ff63ff

080024e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d138      	bne.n	8002568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002500:	2302      	movs	r3, #2
 8002502:	e032      	b.n	800256a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	d139      	bne.n	8002600 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002596:	2302      	movs	r3, #2
 8002598:	e033      	b.n	8002602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2224      	movs	r2, #36	@ 0x24
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_PWREx_GetVoltageRange+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263a:	d130      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d038      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2232      	movs	r2, #50	@ 0x32
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002670:	e002      	b.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002684:	d102      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f2      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002698:	d110      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e00f      	b.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026aa:	d007      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026ac:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026b4:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000
 80026d0:	20000000 	.word	0x20000000
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e3ca      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b97      	ldr	r3, [pc, #604]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	4b94      	ldr	r3, [pc, #592]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80e4 	beq.w	80028d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_RCC_OscConfig+0x4a>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	f040 808b 	bne.w	8002830 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 8087 	bne.w	8002830 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002722:	4b89      	ldr	r3, [pc, #548]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e3a2      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCC_OscConfig+0x7c>
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002752:	e005      	b.n	8002760 <HAL_RCC_OscConfig+0x88>
 8002754:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002760:	4293      	cmp	r3, r2
 8002762:	d223      	bcs.n	80027ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fd55 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e383      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002778:	4b73      	ldr	r3, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a72      	ldr	r2, [pc, #456]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	496d      	ldr	r1, [pc, #436]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002796:	4b6c      	ldr	r3, [pc, #432]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4968      	ldr	r1, [pc, #416]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e025      	b.n	80027f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ac:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a65      	ldr	r2, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b63      	ldr	r3, [pc, #396]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4960      	ldr	r1, [pc, #384]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	495b      	ldr	r1, [pc, #364]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fd15 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e343      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f8:	f000 fc4a 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b52      	ldr	r3, [pc, #328]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	4950      	ldr	r1, [pc, #320]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	4a4e      	ldr	r2, [pc, #312]	@ (8002950 <HAL_RCC_OscConfig+0x278>)
 8002816:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002818:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fd4d 	bl	80012bc <HAL_InitTick>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d052      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	e327      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d032      	beq.n	800289e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002838:	4b43      	ldr	r3, [pc, #268]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a42      	ldr	r2, [pc, #264]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002844:	f7fe fd8a 	bl	800135c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284c:	f7fe fd86 	bl	800135c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e310      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285e:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286a:	4b37      	ldr	r3, [pc, #220]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a36      	ldr	r2, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4931      	ldr	r1, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002888:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	492c      	ldr	r1, [pc, #176]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e01a      	b.n	80028d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fd57 	bl	800135c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b2:	f7fe fd53 	bl	800135c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e2dd      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1da>
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d074      	beq.n	80029ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x21a>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d10e      	bne.n	800290a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d10b      	bne.n	800290a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d064      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d160      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2ba      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x24a>
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e026      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800292a:	d115      	bne.n	8002958 <HAL_RCC_OscConfig+0x280>
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a02      	ldr	r2, [pc, #8]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800293e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	08004704 	.word	0x08004704
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004
 8002958:	4ba0      	ldr	r3, [pc, #640]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9f      	ldr	r2, [pc, #636]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a9c      	ldr	r2, [pc, #624]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fcf0 	bl	800135c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fcec 	bl	800135c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e276      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002992:	4b92      	ldr	r3, [pc, #584]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x2a8>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fcdc 	bl	800135c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fcd8 	bl	800135c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e262      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ba:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d0>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d060      	beq.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x310>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d116      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	4b7c      	ldr	r3, [pc, #496]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x328>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e23f      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	4973      	ldr	r1, [pc, #460]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a14:	e040      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d023      	beq.n	8002a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6e      	ldr	r2, [pc, #440]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fc97 	bl	800135c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7fe fc93 	bl	800135c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e21d      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b62      	ldr	r3, [pc, #392]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	495f      	ldr	r1, [pc, #380]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b5d      	ldr	r3, [pc, #372]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fc73 	bl	800135c <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fc6f 	bl	800135c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1f9      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8c:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aac:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fc4e 	bl	800135c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fc4a 	bl	800135c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1d4      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x3ec>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aec:	4a3b      	ldr	r2, [pc, #236]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fc31 	bl	800135c <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7fe fc2d 	bl	800135c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1b7      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b10:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a6 	beq.w	8002c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	4a26      	ldr	r2, [pc, #152]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d118      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b70:	f7fe fbf4 	bl	800135c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe fbf0 	bl	800135c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e17a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d8>
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bae:	e029      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_OscConfig+0x50c>
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	4a9b      	ldr	r2, [pc, #620]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf4:	4b98      	ldr	r3, [pc, #608]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	4a97      	ldr	r2, [pc, #604]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fba6 	bl	800135c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fba2 	bl	800135c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e12a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <HAL_RCC_OscConfig+0x53c>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fb8f 	bl	800135c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fb8b 	bl	800135c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e113      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a79      	ldr	r2, [pc, #484]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80fe 	beq.w	8002e7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	f040 80d0 	bne.w	8002e2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d130      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	3b01      	subs	r3, #1
 8002cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d127      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d11f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ccc:	2a07      	cmp	r2, #7
 8002cce:	bf14      	ite	ne
 8002cd0:	2201      	movne	r2, #1
 8002cd2:	2200      	moveq	r2, #0
 8002cd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d06e      	beq.n	8002de0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d069      	beq.n	8002ddc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d14:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ad      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d24:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d30:	f7fe fb14 	bl	800135c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fb10 	bl	800135c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e09a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4a:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_RCC_OscConfig+0x784>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d66:	3a01      	subs	r2, #1
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d70:	0212      	lsls	r2, r2, #8
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	0552      	lsls	r2, r2, #21
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0652      	lsls	r2, r2, #25
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d90:	0912      	lsrs	r2, r2, #4
 8002d92:	0452      	lsls	r2, r2, #17
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4930      	ldr	r1, [pc, #192]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002db4:	f7fe fad2 	bl	800135c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe face 	bl	800135c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e058      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	4b22      	ldr	r3, [pc, #136]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dda:	e050      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04f      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d148      	bne.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dec:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e04:	f7fe faaa 	bl	800135c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe faa6 	bl	800135c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e030      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x734>
 8002e2a:	e028      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d023      	beq.n	8002e7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fa8d 	bl	800135c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e44:	e00c      	b.n	8002e60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fa89 	bl	800135c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d905      	bls.n	8002e60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4905      	ldr	r1, [pc, #20]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_OscConfig+0x7b4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	e001      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	feeefffc 	.word	0xfeeefffc

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0e7      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b75      	ldr	r3, [pc, #468]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4970      	ldr	r1, [pc, #448]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cf      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b66      	ldr	r3, [pc, #408]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d908      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b63      	ldr	r3, [pc, #396]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4960      	ldr	r1, [pc, #384]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04c      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	4b5a      	ldr	r3, [pc, #360]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0a6      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2e:	4b54      	ldr	r3, [pc, #336]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e09a      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f46:	4b4e      	ldr	r3, [pc, #312]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e08e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f56:	4b4a      	ldr	r3, [pc, #296]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e086      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b46      	ldr	r3, [pc, #280]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4943      	ldr	r1, [pc, #268]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe f9f0 	bl	800135c <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe f9ec 	bl	800135c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e06e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	492b      	ldr	r1, [pc, #172]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd6:	4b29      	ldr	r3, [pc, #164]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d210      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 0207 	bic.w	r2, r3, #7
 8002fec:	4923      	ldr	r1, [pc, #140]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e036      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4918      	ldr	r1, [pc, #96]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4910      	ldr	r1, [pc, #64]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 f824 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	490b      	ldr	r1, [pc, #44]	@ (8003084 <HAL_RCC_ClockConfig+0x1f4>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1f8>)
 8003062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_RCC_ClockConfig+0x1fc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe f927 	bl	80012bc <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	72fb      	strb	r3, [r7, #11]

  return status;
 8003072:	7afb      	ldrb	r3, [r7, #11]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40022000 	.word	0x40022000
 8003080:	40021000 	.word	0x40021000
 8003084:	08004704 	.word	0x08004704
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b3e      	ldr	r3, [pc, #248]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x34>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d11e      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030c4:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030d0:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030ec:	4a2b      	ldr	r2, [pc, #172]	@ (800319c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d102      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003108:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e004      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d101      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d134      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0xa6>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d003      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0xac>
 8003134:	e005      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	e005      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800313e:	617b      	str	r3, [r7, #20]
      break;
 8003140:	e002      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	617b      	str	r3, [r7, #20]
      break;
 8003146:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0e5b      	lsrs	r3, r3, #25
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	3301      	adds	r3, #1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003188:	69bb      	ldr	r3, [r7, #24]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	0800471c 	.word	0x0800471c
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	007a1200 	.word	0x007a1200

080031a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08004714 	.word	0x08004714

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f0:	f7ff ffda 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08004714 	.word	0x08004714

08003218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003224:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f9ee 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
 8003236:	e014      	b.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	@ 0x58
 8003244:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003250:	f7ff f9de 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 8003254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003260:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003268:	d10b      	bne.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	@ 0x80
 800326e:	d919      	bls.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2ba0      	cmp	r3, #160	@ 0xa0
 8003274:	d902      	bls.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003276:	2302      	movs	r3, #2
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e013      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e010      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d902      	bls.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003288:	2303      	movs	r3, #3
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e00a      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d102      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003294:	2302      	movs	r3, #2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e004      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b70      	cmp	r3, #112	@ 0x70
 800329e:	d101      	bne.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0207 	bic.w	r2, r3, #7
 80032ac:	4909      	ldr	r1, [pc, #36]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40022000 	.word	0x40022000

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d041      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032fc:	d02a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003302:	d824      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800330a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800330e:	d81e      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003318:	d010      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800331a:	e018      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331c:	4b86      	ldr	r3, [pc, #536]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a85      	ldr	r2, [pc, #532]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e015      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fabb 	bl	80038ac <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fba6 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e003      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	74fb      	strb	r3, [r7, #19]
      break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800336a:	4973      	ldr	r1, [pc, #460]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d041      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338c:	d02a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800338e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003392:	d824      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003398:	d008      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800339e:	d81e      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a8:	d010      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033aa:	e018      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ac:	4b62      	ldr	r3, [pc, #392]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a61      	ldr	r2, [pc, #388]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b8:	e015      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fa73 	bl	80038ac <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ca:	e00c      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3320      	adds	r3, #32
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb5e 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	74fb      	strb	r3, [r7, #19]
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ec:	4b52      	ldr	r3, [pc, #328]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fa:	494f      	ldr	r1, [pc, #316]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003402:	e001      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a0 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341a:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	4a40      	ldr	r2, [pc, #256]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	@ 0x58
 800343c:	4b3e      	ldr	r3, [pc, #248]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003448:	2301      	movs	r3, #1
 800344a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003458:	f7fd ff80 	bl	800135c <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345e:	e009      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fd ff7c 	bl	800135c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
        break;
 8003472:	e005      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003474:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d15c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003486:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b0:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fd ff3b 	bl	800135c <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e8:	e00b      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd ff37 	bl	800135c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d902      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ec      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003526:	4904      	ldr	r1, [pc, #16]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b9e      	ldr	r3, [pc, #632]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	4a9d      	ldr	r2, [pc, #628]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	4b98      	ldr	r3, [pc, #608]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	4994      	ldr	r1, [pc, #592]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	4b8f      	ldr	r3, [pc, #572]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f023 020c 	bic.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	498c      	ldr	r1, [pc, #560]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4b87      	ldr	r3, [pc, #540]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	4983      	ldr	r1, [pc, #524]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	497b      	ldr	r1, [pc, #492]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f8:	4972      	ldr	r1, [pc, #456]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360c:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	496a      	ldr	r1, [pc, #424]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b65      	ldr	r3, [pc, #404]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	4961      	ldr	r1, [pc, #388]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003650:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365e:	4959      	ldr	r1, [pc, #356]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003672:	4b54      	ldr	r3, [pc, #336]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	4950      	ldr	r1, [pc, #320]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	4948      	ldr	r1, [pc, #288]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	493f      	ldr	r1, [pc, #252]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d028      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d8:	4b3a      	ldr	r3, [pc, #232]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e6:	4937      	ldr	r1, [pc, #220]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036f6:	d106      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a31      	ldr	r2, [pc, #196]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e011      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f8c8 	bl	80038ac <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003736:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	491f      	ldr	r1, [pc, #124]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003754:	d106      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003756:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f899 	bl	80038ac <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	4908      	ldr	r1, [pc, #32]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037b2:	d109      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a02      	ldr	r2, [pc, #8]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
 80037c0:	e014      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f867 	bl	80038ac <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f8:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003806:	4928      	ldr	r1, [pc, #160]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f844 	bl	80038ac <RCCEx_PLLSAI1_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d014      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	74bb      	strb	r3, [r7, #18]
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3320      	adds	r3, #32
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f925 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003864:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003872:	490d      	ldr	r1, [pc, #52]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003886:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003896:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800389e:	7cbb      	ldrb	r3, [r7, #18]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ba:	4b75      	ldr	r3, [pc, #468]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0203 	and.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d10d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
       ||
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038de:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
       ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d047      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e044      	b.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d018      	beq.n	8003932 <RCCEx_PLLSAI1_Config+0x86>
 8003900:	2b03      	cmp	r3, #3
 8003902:	d825      	bhi.n	8003950 <RCCEx_PLLSAI1_Config+0xa4>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x62>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d009      	beq.n	8003920 <RCCEx_PLLSAI1_Config+0x74>
 800390c:	e020      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800390e:	4b60      	ldr	r3, [pc, #384]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391e:	e01a      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003920:	4b5b      	ldr	r3, [pc, #364]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d116      	bne.n	800395a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e013      	b.n	800395a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003932:	4b57      	ldr	r3, [pc, #348]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800393e:	4b54      	ldr	r3, [pc, #336]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800394e:	e006      	b.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e004      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800395e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003966:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	430b      	orrs	r3, r1
 800397c:	4944      	ldr	r1, [pc, #272]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d17d      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003988:	4b41      	ldr	r3, [pc, #260]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a40      	ldr	r2, [pc, #256]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fd fce2 	bl	800135c <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800399a:	e009      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399c:	f7fd fcde 	bl	800135c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d902      	bls.n	80039b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	73fb      	strb	r3, [r7, #15]
        break;
 80039ae:	e005      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b0:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ef      	bne.n	800399c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d160      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d111      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c8:	4b31      	ldr	r3, [pc, #196]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	0211      	lsls	r1, r2, #8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68d2      	ldr	r2, [r2, #12]
 80039de:	0912      	lsrs	r2, r2, #4
 80039e0:	0452      	lsls	r2, r2, #17
 80039e2:	430a      	orrs	r2, r1
 80039e4:	492a      	ldr	r1, [pc, #168]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
 80039ea:	e027      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d112      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f2:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	0211      	lsls	r1, r2, #8
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6912      	ldr	r2, [r2, #16]
 8003a08:	0852      	lsrs	r2, r2, #1
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0552      	lsls	r2, r2, #21
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	491f      	ldr	r1, [pc, #124]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	610b      	str	r3, [r1, #16]
 8003a16:	e011      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	0211      	lsls	r1, r2, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6952      	ldr	r2, [r2, #20]
 8003a2e:	0852      	lsrs	r2, r2, #1
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0652      	lsls	r2, r2, #25
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4916      	ldr	r1, [pc, #88]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fd fc88 	bl	800135c <HAL_GetTick>
 8003a4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a4e:	e009      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a50:	f7fd fc84 	bl	800135c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	73fb      	strb	r3, [r7, #15]
          break;
 8003a62:	e005      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4904      	ldr	r1, [pc, #16]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0203 	and.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10d      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ac6:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d047      	beq.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e044      	b.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d018      	beq.n	8003b1a <RCCEx_PLLSAI2_Config+0x86>
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d825      	bhi.n	8003b38 <RCCEx_PLLSAI2_Config+0xa4>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x62>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d009      	beq.n	8003b08 <RCCEx_PLLSAI2_Config+0x74>
 8003af4:	e020      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003af6:	4b55      	ldr	r3, [pc, #340]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11d      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b06:	e01a      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b18:	e013      	b.n	8003b42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b26:	4b49      	ldr	r3, [pc, #292]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b36:	e006      	b.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e004      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	430b      	orrs	r3, r1
 8003b64:	4939      	ldr	r1, [pc, #228]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d167      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b70:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fbee 	bl	800135c <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b84:	f7fd fbea 	bl	800135c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
        break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b98:	4b2c      	ldr	r3, [pc, #176]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ef      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d14a      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d111      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb0:	4b26      	ldr	r3, [pc, #152]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	0912      	lsrs	r2, r2, #4
 8003bc8:	0452      	lsls	r2, r2, #17
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	491f      	ldr	r1, [pc, #124]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	614b      	str	r3, [r1, #20]
 8003bd2:	e011      	b.n	8003bf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6912      	ldr	r2, [r2, #16]
 8003bea:	0852      	lsrs	r2, r2, #1
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0652      	lsls	r2, r2, #25
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fbaa 	bl	800135c <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c0a:	e009      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c0c:	f7fd fba6 	bl	800135c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c1e:	e005      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000

08003c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e040      	b.n	8003ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fa2e 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	@ 0x24
 8003c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fae0 	bl	800425c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f825 	bl	8003cec <UART_SetConfig>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e01b      	b.n	8003ce4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fb5f 	bl	80043a0 <UART_CheckIdleState>
 8003ce2:	4603      	mov	r3, r0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b08a      	sub	sp, #40	@ 0x28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4ba4      	ldr	r3, [pc, #656]	@ (8003fac <UART_SetConfig+0x2c0>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a99      	ldr	r2, [pc, #612]	@ (8003fb0 <UART_SetConfig+0x2c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	4313      	orrs	r3, r2
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a90      	ldr	r2, [pc, #576]	@ (8003fb4 <UART_SetConfig+0x2c8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d126      	bne.n	8003dc4 <UART_SetConfig+0xd8>
 8003d76:	4b90      	ldr	r3, [pc, #576]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d81b      	bhi.n	8003dbc <UART_SetConfig+0xd0>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0xa0>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003dad 	.word	0x08003dad
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e116      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e112      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e10e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e10a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e106      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fbc <UART_SetConfig+0x2d0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d138      	bne.n	8003e40 <UART_SetConfig+0x154>
 8003dce:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d82d      	bhi.n	8003e38 <UART_SetConfig+0x14c>
 8003ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <UART_SetConfig+0xf8>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	08003e39 	.word	0x08003e39
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e39 	.word	0x08003e39
 8003dfc:	08003e39 	.word	0x08003e39
 8003e00:	08003e39 	.word	0x08003e39
 8003e04:	08003e21 	.word	0x08003e21
 8003e08:	08003e39 	.word	0x08003e39
 8003e0c:	08003e39 	.word	0x08003e39
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e31 	.word	0x08003e31
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e0d8      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e20:	2302      	movs	r3, #2
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e0d4      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e0d0      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e30:	2308      	movs	r3, #8
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e0cc      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3e:	e0c8      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc0 <UART_SetConfig+0x2d4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d125      	bne.n	8003e96 <UART_SetConfig+0x1aa>
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e54:	2b30      	cmp	r3, #48	@ 0x30
 8003e56:	d016      	beq.n	8003e86 <UART_SetConfig+0x19a>
 8003e58:	2b30      	cmp	r3, #48	@ 0x30
 8003e5a:	d818      	bhi.n	8003e8e <UART_SetConfig+0x1a2>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d00a      	beq.n	8003e76 <UART_SetConfig+0x18a>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d814      	bhi.n	8003e8e <UART_SetConfig+0x1a2>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <UART_SetConfig+0x182>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d008      	beq.n	8003e7e <UART_SetConfig+0x192>
 8003e6c:	e00f      	b.n	8003e8e <UART_SetConfig+0x1a2>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e74:	e0ad      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e76:	2302      	movs	r3, #2
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7c:	e0a9      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e84:	e0a5      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e86:	2308      	movs	r3, #8
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8c:	e0a1      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e8e:	2310      	movs	r3, #16
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e94:	e09d      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc4 <UART_SetConfig+0x2d8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d125      	bne.n	8003eec <UART_SetConfig+0x200>
 8003ea0:	4b45      	ldr	r3, [pc, #276]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eac:	d016      	beq.n	8003edc <UART_SetConfig+0x1f0>
 8003eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eb0:	d818      	bhi.n	8003ee4 <UART_SetConfig+0x1f8>
 8003eb2:	2b80      	cmp	r3, #128	@ 0x80
 8003eb4:	d00a      	beq.n	8003ecc <UART_SetConfig+0x1e0>
 8003eb6:	2b80      	cmp	r3, #128	@ 0x80
 8003eb8:	d814      	bhi.n	8003ee4 <UART_SetConfig+0x1f8>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <UART_SetConfig+0x1d8>
 8003ebe:	2b40      	cmp	r3, #64	@ 0x40
 8003ec0:	d008      	beq.n	8003ed4 <UART_SetConfig+0x1e8>
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x1f8>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e082      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e07e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e07a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e076      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e072      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <UART_SetConfig+0x2dc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d12a      	bne.n	8003f4c <UART_SetConfig+0x260>
 8003ef6:	4b30      	ldr	r3, [pc, #192]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f04:	d01a      	beq.n	8003f3c <UART_SetConfig+0x250>
 8003f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f0a:	d81b      	bhi.n	8003f44 <UART_SetConfig+0x258>
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d00c      	beq.n	8003f2c <UART_SetConfig+0x240>
 8003f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f16:	d815      	bhi.n	8003f44 <UART_SetConfig+0x258>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <UART_SetConfig+0x238>
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f20:	d008      	beq.n	8003f34 <UART_SetConfig+0x248>
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x258>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2a:	e052      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e04e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e04a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e046      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e042      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <UART_SetConfig+0x2c4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d13a      	bne.n	8003fcc <UART_SetConfig+0x2e0>
 8003f56:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f64:	d01a      	beq.n	8003f9c <UART_SetConfig+0x2b0>
 8003f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6a:	d81b      	bhi.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f70:	d00c      	beq.n	8003f8c <UART_SetConfig+0x2a0>
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f76:	d815      	bhi.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <UART_SetConfig+0x298>
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f80:	d008      	beq.n	8003f94 <UART_SetConfig+0x2a8>
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	e022      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e01e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e01a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e016      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e012      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003fac:	efff69f3 	.word	0xefff69f3
 8003fb0:	40008000 	.word	0x40008000
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40004800 	.word	0x40004800
 8003fc4:	40004c00 	.word	0x40004c00
 8003fc8:	40005000 	.word	0x40005000
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a9f      	ldr	r2, [pc, #636]	@ (8004254 <UART_SetConfig+0x568>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d17a      	bne.n	80040d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d824      	bhi.n	800402e <UART_SetConfig+0x342>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x300>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	0800402f 	.word	0x0800402f
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	0800401f 	.word	0x0800401f
 8004000:	0800402f 	.word	0x0800402f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800402f 	.word	0x0800402f
 800400c:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff f8d6 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8004014:	61f8      	str	r0, [r7, #28]
        break;
 8004016:	e010      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b8f      	ldr	r3, [pc, #572]	@ (8004258 <UART_SetConfig+0x56c>)
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e00d      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7ff f837 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004022:	61f8      	str	r0, [r7, #28]
        break;
 8004024:	e009      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402a:	61fb      	str	r3, [r7, #28]
        break;
 800402c:	e005      	b.n	800403a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004038:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80fb 	beq.w	8004238 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d305      	bcc.n	800405e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004064:	e0e8      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2200      	movs	r2, #0
 800406a:	461c      	mov	r4, r3
 800406c:	4615      	mov	r5, r2
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	022b      	lsls	r3, r5, #8
 8004078:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800407c:	0222      	lsls	r2, r4, #8
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	6849      	ldr	r1, [r1, #4]
 8004082:	0849      	lsrs	r1, r1, #1
 8004084:	2000      	movs	r0, #0
 8004086:	4688      	mov	r8, r1
 8004088:	4681      	mov	r9, r0
 800408a:	eb12 0a08 	adds.w	sl, r2, r8
 800408e:	eb43 0b09 	adc.w	fp, r3, r9
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a0:	4650      	mov	r0, sl
 80040a2:	4659      	mov	r1, fp
 80040a4:	f7fc f890 	bl	80001c8 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b6:	d308      	bcc.n	80040ca <UART_SetConfig+0x3de>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040be:	d204      	bcs.n	80040ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e0b6      	b.n	8004238 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d0:	e0b2      	b.n	8004238 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040da:	d15e      	bne.n	800419a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d828      	bhi.n	8004136 <UART_SetConfig+0x44a>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x400>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff f856 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7ff f868 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b4d      	ldr	r3, [pc, #308]	@ (8004258 <UART_SetConfig+0x56c>)
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe ffb3 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800412a:	61f8      	str	r0, [r7, #28]
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d077      	beq.n	8004238 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	005a      	lsls	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	441a      	add	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d916      	bls.n	8004192 <UART_SetConfig+0x4a6>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d212      	bcs.n	8004192 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f023 030f 	bic.w	r3, r3, #15
 8004174:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	b29a      	uxth	r2, r3
 8004182:	8afb      	ldrh	r3, [r7, #22]
 8004184:	4313      	orrs	r3, r2
 8004186:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	8afa      	ldrh	r2, [r7, #22]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	e052      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004198:	e04e      	b.n	8004238 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800419a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d827      	bhi.n	80041f2 <UART_SetConfig+0x506>
 80041a2:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <UART_SetConfig+0x4bc>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041f3 	.word	0x080041f3
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	080041f3 	.word	0x080041f3
 80041c0:	080041f3 	.word	0x080041f3
 80041c4:	080041f3 	.word	0x080041f3
 80041c8:	080041eb 	.word	0x080041eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe fff8 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
        break;
 80041d2:	e014      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7ff f80a 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 80041d8:	61f8      	str	r0, [r7, #28]
        break;
 80041da:	e010      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <UART_SetConfig+0x56c>)
 80041de:	61fb      	str	r3, [r7, #28]
        break;
 80041e0:	e00d      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e2:	f7fe ff55 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80041e6:	61f8      	str	r0, [r7, #28]
        break;
 80041e8:	e009      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ee:	61fb      	str	r3, [r7, #28]
        break;
 80041f0:	e005      	b.n	80041fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041fc:	bf00      	nop
    }

    if (pclk != 0U)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d019      	beq.n	8004238 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	085a      	lsrs	r2, r3, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d909      	bls.n	8004232 <UART_SetConfig+0x546>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d205      	bcs.n	8004232 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	e002      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004244:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	40008000 	.word	0x40008000
 8004258:	00f42400 	.word	0x00f42400

0800425c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01a      	beq.n	8004372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435a:	d10a      	bne.n	8004372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b098      	sub	sp, #96	@ 0x60
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b0:	f7fc ffd4 	bl	800135c <HAL_GetTick>
 80043b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d12e      	bne.n	8004422 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f88c 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d021      	beq.n	8004422 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e062      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d149      	bne.n	80044c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f856 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03c      	beq.n	80044c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	623b      	str	r3, [r7, #32]
   return(result);
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
 800446a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800446e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	60fb      	str	r3, [r7, #12]
   return(result);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	69b9      	ldr	r1, [r7, #24]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	617b      	str	r3, [r7, #20]
   return(result);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e011      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3758      	adds	r7, #88	@ 0x58
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e04f      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004508:	d04b      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fc ff27 	bl	800135c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e04e      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d037      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d034      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d031      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d110      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2208      	movs	r2, #8
 8004552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f838 	bl	80045ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2208      	movs	r2, #8
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e029      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d111      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f81e 	bl	80045ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0a0      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b095      	sub	sp, #84	@ 0x54
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	61fb      	str	r3, [r7, #28]
   return(result);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	2b01      	cmp	r3, #1
 800463e:	d118      	bne.n	8004672 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	60bb      	str	r3, [r7, #8]
   return(result);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	647b      	str	r3, [r7, #68]	@ 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6979      	ldr	r1, [r7, #20]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e6      	bne.n	8004640 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004686:	bf00      	nop
 8004688:	3754      	adds	r7, #84	@ 0x54
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <memset>:
 8004692:	4402      	add	r2, r0
 8004694:	4603      	mov	r3, r0
 8004696:	4293      	cmp	r3, r2
 8004698:	d100      	bne.n	800469c <memset+0xa>
 800469a:	4770      	bx	lr
 800469c:	f803 1b01 	strb.w	r1, [r3], #1
 80046a0:	e7f9      	b.n	8004696 <memset+0x4>
	...

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	@ (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	@ (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <__libc_init_array+0x44>)
 80046b8:	f000 f818 	bl	80046ec <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08004754 	.word	0x08004754
 80046e0:	08004754 	.word	0x08004754
 80046e4:	08004754 	.word	0x08004754
 80046e8:	08004758 	.word	0x08004758

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
